// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// STORE SCHEMA -
model Store {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  billboards Billboard[]
  Category   Category[]
  sizes      Size[]
  colors     Color[]
  produtct   Product[]
}

// BILLBOARD -
model Billboard {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String     @db.ObjectId
  label     String
  imageUrl  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  store     Store      @relation(fields: [storeId], references: [id], onDelete: Cascade)
  Category  Category[]

  @@index([storeId])
}

// CATEGORY -
model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId
  store       Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  billboardId String    @db.ObjectId
  billBoard   Billboard @relation(fields: [billboardId], references: [id], onDelete: Cascade)
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Product     Product[]

  @@index([storeId])
  @@index([billboardId])
}

// SIZE -
model Size {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String    @db.ObjectId
  store     Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[]

  @@index([storeId])
}

// COLOR -
model Color {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String    @db.ObjectId
  store     Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[]

  @@index([storeId])
}

// PRODUCT -
model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String   @db.ObjectId
  store       Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  categoryId  String   @db.ObjectId
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  name        String
  price       Float
  isFeatured  Boolean  @default(false)
  isArchived  Boolean  @default(false)
  sizeId      String   @db.ObjectId
  size        Size     @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  colorId     String   @db.ObjectId
  color       Color    @relation(fields: [colorId], references: [id])
  image       Image[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([sizeId])
  @@index([storeId])
  @@index([categoryId])
  @@index([colorId])
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}
